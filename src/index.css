@tailwind base;
@tailwind components;
@tailwind utilities;

@layer utilities {
  /* Fade-in-up (optional) */
  @keyframes fadeInUp {
    0% { opacity: 0; transform: translateY(20px); }
    100% { opacity: 1; transform: translateY(0); }
  }
  .animate-fade-in-up {
    animation: fadeInUp 0.6s ease-out both;
  }

  /* Shimmer animation */
  @keyframes borderShimmer {
    0% { background-position: -200% 0; }
    100% { background-position: 200% 0; }
  }
}

/* ================================= */
/* 1) Shimmer border around the card */
/* ================================= */
.gradient-border {
  position: relative;
  display: block;             /* full-width block so it won’t shrink */
  width: 100%;                /* span available width without causing overflow */
  max-width: 640px;           /* but never exceed the desktop card width */
  margin: 0 auto;             /* center horizontally */
  border-radius: 1rem;
  padding: 3px;               /* border thickness */
  overflow: hidden;
}

.gradient-border::before {
  content: "";
  position: absolute;
  inset: 0;
  border-radius: inherit;
  background: linear-gradient(
    90deg,
    #444 0%, #ccc 25%, #777 50%, #ccc 75%, #444 100%
  );
  background-size: 200% 100%;
  -webkit-mask: linear-gradient(#fff 0 0) content-box,
                linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
          mask-composite: exclude;
  mask-mode: alpha;
  padding: 3px;
  animation: borderShimmer 3s linear infinite;
  z-index: 0;
}

.gradient-border > * {
  position: relative;
  z-index: 1;
}

/* ============================= */
/* 2) Card container shadow      */
/* ============================= */
.card-container {
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);
  border-radius: 1rem;
  width: 100%;
  height: 100%;
}

/* ============================= */
/* 3) Floor reflection           */
/* ============================= */
.card-reflection {
  position: absolute;
  bottom: -46%;
  left: 3px;
  width: calc(100% - 6px);
  height: 60%;
  background: linear-gradient(to bottom, rgba(255,255,255,0.15), transparent);
  transform: scaleY(-1);
  filter: blur(10px);
  opacity: 0.2;
  border-radius: inherit;
  pointer-events: none;
  z-index: 0;
}

/* hide reflection under 768px to avoid overflow on very small screens */
@media (max-width: 767px) {
  .card-reflection {
    display: none;
  }
}

/* ============================= */
/* 4) Background glow            */
/* ============================= */
.background-glow {
  position: absolute;
  inset: 0;
  background: radial-gradient(circle at center, rgba(255,255,255,0.08), transparent 70%);
  z-index: 0;
}

/* ============================= */
/* 5) Responsive helpers         */
/* ============================= */
@media (max-width: 640px) {
  /* ensure padding inside the actual card scales down */
  .p-8 { padding: 1rem !important; }
  .p-6 { padding: 0.75rem !important; }
  .text-2xl { font-size: 1.25rem !important; }
  .text-xl  { font-size: 1rem !important; }
}

/* Particle burst overlay */
.particle-burst-overlay {
  position: absolute;
  inset: 0;
  pointer-events: none;
  z-index: 20;
}

/* Individual particles */
.particle {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 6px;
  height: 6px;
  background: #D4AF37;
  border-radius: 50%;
  animation: particleMove 0.8s ease-out forwards;
}

/* Generate random directions per particle via inline CSS variables */
.particle:nth-child(odd)   { --dx:  -1; --dy: -1; }
.particle:nth-child(2n)    { --dx:   1; --dy: -1; }
.particle:nth-child(3n)    { --dx:  -1; --dy:  1; }
.particle:nth-child(4n)    { --dx:   1; --dy:  1; }
/* and so on for more variation... */

@keyframes particleMove {
  to {
    transform: translate(
      calc(var(--dx) * (20px + random(10px))),
      calc(var(--dy) * (20px + random(10px)))
    ) scale(0);
    opacity: 0;
  }
}

/* Fallback if browser doesn’t support random(): just use fixed distances */
@supports not (animation: particleMove) {
  @keyframes particleMove {
    to {
      transform: translate(
        calc(var(--dx) * 30px),
        calc(var(--dy) * 30px)
      ) scale(0);
      opacity: 0;
    }
  }
}